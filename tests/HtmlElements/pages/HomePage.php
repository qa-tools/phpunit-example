<?php

namespace tests\HtmlElements\pages;


use QATools\QATools\HtmlElements\TypifiedPage;
use QATools\QATools\PageObject\Element\WebElement;
use QATools\QATools\HtmlElements\Element\Select;
use QATools\QATools\HtmlElements\Element\Button;
use QATools\QATools\HtmlElements\Element\RadioGroup;

/**
 * @page-url('/HtmlElements/')
 */
class HomePage extends TypifiedPage {

	/**
	 *
	 * @var WebElement
	 * @find-by('css' => 'select[name="curr_iso"]')
	 */
	protected $currencyDropdown;

	/**
	 *
	 * @var Select
	 * @find-by('css' => 'select[name="language"]')
	 * @element-name('Custom Element Name')
	 */
	protected $languageDropdown;

	/**
	 *
	 * @var RadioGroup
	 * @find-by('css' => 'input[name="radio-name"][type="radio"]')
	 * @element-name('Custom Element Name')
	 */
	protected $radioGroup;

	/**
	 *
	 * @var WebElement
	 * @find-by('name' => 'u.login-sidebox[-2][UserLogin]')
	 */
	protected $usernameInput;

	/**
	 *
	 * @var WebElement
	 * @find-by('name' => 'u.login-sidebox[-2][UserPassword]')
	 */
	protected $passwordInput;

	/**
	 * Login Button
	 *
	 * @var Button
	 * @find-by('name' => 'events[u.login-sidebox][OnLogin]')
	 */
	protected $loginButton;

	/**
	 * Login Sidebox
	 *
	 * @var LoginSidebox
	 * @find-by('id' => 'login-sidebox')
	 */
	protected $loginSidebox;

	/**
	 * Sidebar
	 *
	 * @var Sidebar
	 */
	protected $sidebar;

	/**
	 * Name of the test
	 *
	 * @var string
	 */
	protected $myTest = '';

	/**
	 * Changes currency.
	 *
	 * @param string $currency_code Currency code.
	 *
	 * @return void
	 */
	public function changeCurrency($currency_code)
	{
		$this->currencyDropdown->setValue($currency_code);
	}

	/**
	 * Changes language.
	 *
	 * @param string $language_title Language title.
	 *
	 * @return void
	 */
	public function changeLanguage($language_title)
	{
		$this->languageDropdown->selectByText($language_title);
	}

	/**
	 * Returns radio button collection.
	 *
	 * @return RadioGroup
	 */
	public function getRadioGroup()
	{
		// Need `getObject` to iterate over current collection in proxy and not a list of collection.
		return $this->radioGroup->getObject();
	}

	/**
	 * Selects radio button by value.
	 *
	 * @param mixed $value Value.
	 *
	 * @return void
	 */
	public function selectRadioButton($value)
	{
		$this->radioGroup->selectButtonByValue($value);
	}

	/**
	 * Performs login using elements declared inline.
	 *
	 * @param string $username Username.
	 * @param string $password Password.
	 *
	 * @return void
	 */
	public function loginInline($username, $password)
	{
		$this->usernameInput->setValue($username);
		$this->passwordInput->setValue($password);
		$this->loginButton->click();
	}

	/**
	 * Performs login using elements from sidebox.
	 *
	 * @param string $username Username.
	 * @param string $password Password.
	 *
	 * @return string
	 */
	public function loginViaSidebox($username, $password)
	{
		return $this->loginSidebox->login($username, $password)->getLoginErrorMessage();
	}

	/**
	 * Performs login using elements sidebar, that uses sidebox.
	 *
	 * @param string $username Username.
	 * @param string $password Password.
	 *
	 * @return string
	 */
	public function loginViaSidebar($username, $password)
	{
		return $this->sidebar->login($username, $password);
	}

	/**
	 * Returns auto-generated name of the element.
	 *
	 * @return string
	 */
	public function getAutoGeneratedElementName()
	{
		return $this->sidebar->getName();
	}

	/**
	 * Returns overridden name of the element.
	 *
	 * @return string
	 */
	public function getOverrideElementName()
	{
		return $this->loginSidebox->getName();
	}

}
